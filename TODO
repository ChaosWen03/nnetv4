DONE

	next_packet_loss_tracker_t

	When 100% coverage is reached with server internal, run soak test again and leave it running for a few hours.

	Extend to cover the next_server_t

	next_proxy_session_manager_t

	next_proxy_session_entry_t

	next_client_internal_t

	next_client_t

TODO

	next_ping_history_t

	near_relay_stats_t

	--------------------------------

	Extend to cover internal objects of next_client_internal_t

	--------------------------------

	Extend to cover internal objects of next_client_t

	--------------------------------





















	--------------------------------

	Extend the soak test to run with global and per-client and per-server contexts.

	Inside these contexts, have a std::map and track all allocations. When it frees, make sure all allocations are free.

	Implement safety checks at the end of each freed buffer.

	Basically we now have our own valgrind now.

	--------------------------------

	When no customer public key is specified on the client, print this out and say falling back to direct only.

	(don't print out customer key found, dumb)

	--------------------------------

	When no customer private key is specified, on the server, print this out and say, falling back to direct only.

	(don't print out customer key found, dumb)

	--------------------------------

	We really should have a functional test that verifies payload client -> server direct, upgraded direct, and next.

	I mean FFS we could break game payload and not know...

	--------------------------------

	There must be a functional test to verify bandwidth limiting.

	--------------------------------

	Add counters to verify next pings and pongs are working.

	--------------------------------

	Add counters to verify direct pings and pongs are working.

	--------------------------------

	Add counters to verify near relay ping and pong are working.

	--------------------------------

	Check counters for pings/pongs to make sure they are as expected in functional tests.

	--------------------------------

	Fuzz test with client and server localhost with random direct packets w. random lengths.

	Meant to check stability of our protocols against random data.

	Worth running overnight. Add test: ./bin/fuzz

	--------------------------------

	Get the win64 testbed up and running debug and release.

	Get the win64 soak test running inside the win64 testbed.

	Run soak test for 1 hr on windows.

	--------------------------------

	Get the soak test running on ps4.

	Run soak test for 1 hr on ps4.

	--------------------------------

	Get the soak test running on x1.

	Run soak test for 1 hr on x1.

	--------------------------------

	From Velan:

	"Xbox One seems to have asymmetric alloc/free, it attempted to free something using the global context that wasn't allocated with the global context."

	Find this and fix it.

	--------------------------------

	Find a way to automatically determine what datacenter we are running in.

	eg. either public IP address range for bare metal, or server-side code that detects when you are in a cloud.

	Environment variable setting should always remain available as a fallback.

	--------------------------------

	*** IMPORTANT ***

	Would be good to track the client and server packets sent, so we can do packet loss as a % calculation, when games send different rates of packets, or even, variable packet sends... we'll need it.

	Better get it in ASAP. Going to suck if we don't have it for a customer.

	--------------------------------

	"Hey Glenn, the distro we'll be using is CentOS. Would it be possible for you to provide us with the plugin for both versions 7 and 8?"

	PUBG need Linux plugin versions for CentOS 7 and 8.

	--------------------------------

	Build the iOS testbed and verify working on my iPad Pro or with emulator.

	--------------------------------
