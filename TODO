DONE

	Check all next_printf functions. Just found one that was missing args.

	Bring back the old reference backend before it was changed to use helper code.

	Clean it up and identify where we need to extend with blake2 prefix.

	Extend the reference backend to talk server init request/response protocol.

	Init request packet is read.

	Next, get the response going...

	ps. Verified relay talks to the reference backend just fine.

	Verify reference backend is able to talk to server and relays properly, and can carry sessions from an older version of SDK.

	Verify session update works with relays. It needs to be updated to support user flags and committed.

	Bring across code for blake2 hash into golang via libsodium.

	Reference backend code can now determine if a packet is network next or not.

	Extend backend code to sign packets sent back to the server.

	Verify the server gets the init response.

	Extend to the session update response.

	Verify that without a relay, client and server work and can sustain an upgraded direct route.

	Do not bother to maintain support for old and new relay packets. That can be done in the new relay. The reference relay is always bleeding edge.

	Upgrade the reference relay to use the blake2 prefixed packets.

	Extend the reference relay to have full debug logs on all conditions where packets are ignored.

	Update code that sends route request packet to prefix with packet hash.

	Is the server getting a route request packet from the relay, or is the server ignoring it?

	Server is now getting the route request packet, but I'm not sure it's firing back the route response correctly with hash prefix.

	Extend the server to reply back with the route response packet with hash prefix. 

	Fix client processing of continue response packet.

	Client now gets continue response packet.

	Appears that the server is not getting the continue request from the relay...

	Fixed error in continue response packet forwarding.

	I believe the client -> server packets aren't getting through, which doesn't confirm the route.

	Thus when the continue request packet gets through: "server ignored continue request packet. no route to continue".

	Error in filling out continue response on server fixed.

	Client is now getting continue response, but is unable to read header.

	Easy fix. It's not reading at correct offset.

	Client now continues route.

	Seems like a lot of packets hitting the relay that don't have the signature.

	Next ping/pong packets? Probably...

	Could also be server -> client packets. Check those first.

	Now the packets are less frequent. Clearly pings. Relay is definitely receiving next pings.

	Not sure if server is receiving next pings.

	Relay doesn't seem to be receiving next pongs.

	Check the server...

	Relay was screwing it up. fixed.

	Verify direct and next pongs are received on client.

	Verify near ping/pongs are working.

	Verify that relay to relay pings and pongs are being received.

	Verify that we can get traffic across several reference relays.

	Works.

	There's a situation where the backend stops receiving packets from teh server after a while.

	Adding a log shows the packets are triggering "not a network next packet".

	Have I missed a codepath where the server updates or session updates are not hash prefixed properly?
	
	Can't seem to reproduce this without relays in the mix. What is it?

	It does reproduce without relays, just leave it for a while:

	-----------------------------
	server: 127.0.0.1:32202
	-----------------------------
	server: 127.0.0.1:32202
	session: dfab85ba9373c91e
	error: not a network next packet (220)
	error: not a network next packet (220)
	error: not a network next packet (220)
	error: not a network next packet (220)
	error: not a network next packet (220)
	error: not a network next packet (220)
	-----------------------------
	server: 127.0.0.1:32202
	error: not a network next packet (140)
	-----------------------------
	(nil)
	error: not a network next packet (140)
	error: not a network next packet (140)
	error: not a network next packet (140)
	error: not a network next packet (140)
	error: not a network next packet (140)
	error: not a network next packet (140)

	--------------------------------

	These must be server update packets. Nothing else is being sent to the backend.

TODO


	But how can these be sent through to the backend, without tripping the code to check if network next packet on write backend packet?






	--------------------------------

	When no customer public key is specified on the client, print this out and say falling back to direct only.

	--------------------------------

	When no customer private key is specified, on the server, print this out and say, falling back to direct only.

	--------------------------------

	We really should have a functional test that verifies payload client -> server direct, upgraded direct, and next.

	I mean FFS we could break game payload and not know...

	--------------------------------

	Add counters to verify next pings and pongs are working.

	--------------------------------

	Add counters to verify direct pings and pongs are working.

	--------------------------------

	Add counters to verify near relay ping and pong are working.

	--------------------------------

	Check counters for pings/pongs to make sure they are as expected in functional tests.

	--------------------------------

	Fuzz test with client and server localhost with random direct packets w. random lengths.

	Meant to check stability of our protocols against random data.

	Worth running overnight. Add test.

	--------------------------------

	Add memory guard buffers to help catch memory trashes (suspected from Velan).

	--------------------------------

	Get the win64 testbed up and running debug and release.

	Get the win64 soak test running inside the win64 testbed.

	Run soak test for 1 hr on windows.

	--------------------------------

	Get the soak test running on ps4.

	Run soak test for 1 hr on ps4.

	--------------------------------

	Get the soak test running on x1.

	Run soak test for 1 hr on x1.

	--------------------------------

	From Velan:

	"Xbox One seems to have asymmetric alloc/free, it attempted to free something using the global context that wasn't allocated with the global context."

	Find this and fix it.

	--------------------------------

	Find a way to automatically determine what datacenter we are running in.

	eg. either public IP address range for bare metal, or server-side code that detects when you are in a cloud.

	Environment variable setting should always remain available as a fallback.

	--------------------------------

	Would be good to track the client and server packets sent, so we can do packet loss as a % calculation, when games send different rates of packets.

	--------------------------------

	Re-add the client and server tests with ports, once I enable the ports on X1 in my own manifest...

	--------------------------------

	Find a way to get the X1 testing going within a UE4 plugin context.

	There is weird stuff with the ipv4 as ipv6 that needs to be tested.

	Also need to test the port binding running in the context of UE4.

	--------------------------------

	"Hey Glenn, the distro we'll be using is CentOS. Would it be possible for you to provide us with the plugin for both versions 7 and 8?"

	PUBG need Linux plugin versions for CentOS 7 and 8.

	--------------------------------

	Build the iOS testbed and verify working on my iPad Pro or with emulator.

	--------------------------------
