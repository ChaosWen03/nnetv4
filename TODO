DONE

	Server needs to handle "route request" packet. Check the very specific size (one token). Check that it decrypts, otherwise pass to game.

	Once this is done, running under a func test backend should result in the client getting the route response packet.

	Bring across "continue request" packet.

	Bring across "client to server" packet.

	Bring across "next ping" packet.

	Bring across "server to client" packet.

	Bring across "next pong" packet.

	Verify that everything works with ref backend, eg. packets across network next route.

	Works fine, but seems like continue request timed out. Might be missing continue response packet handling?

	Fixed. Continue response not handled.

	Now need to go across all todos and remove debug logs...

	Network Next passes functional tests again.

	Added next_is_network_next_packet

	Removing NEXT_MAGIC.

	Simplifying...

	Extended next_write_packet to include the hash prefix.

	Extend next_read_packet to skip past the hash prefix, since we've already checked...		

	Added assert to make sure it's valid tho.

	Extend next_write_backend packet to include the packet hash.

	Remove all the contortions around *valid. It's no longer necessary or required complexity.

TODO

	Whoo boy there's a lot of fixes required.

	--------------------------------

	Check all next_printf functions. Just found one that was missing args.

	--------------------------------

	Get the reference backend talking the protocol with the blake2 prefix.

	--------------------------------

	Upgrade reference to have a codepath for the blake2 prefixed packets.

	--------------------------------











	--------------------------------

	Need a test with payload packets of all first bytes, to make sure they all get through even when network next is enabled on the server, even post-upgrade, make sure they all get through, eg. switch to sending direct after upgrade... test all byte combinations.

	--------------------------------

	Add a test to verify that no network next packets leak through to game.

	--------------------------------

	Fuzz test with client and server localhost with random direct packets w. random lengths.

	Meant to check stability of our protocols against random data.

	Worth running overnight. Add test.

	--------------------------------

	Add memory guard buffers to help catch memory trashes (suspected from Velan).

	--------------------------------

	Find a way to automatically determine what datacenter we are running in.

	eg. either public IP address range for bare metal, or server-side code that detects when you are in a cloud.

	Environment variable setting should always remain available as a fallback.

	--------------------------------

	Get the win64 testbed up and running debug and release.

	Get the win64 soak test running inside the win64 testbed.

	Run soak test for 1 hr on windows.

	--------------------------------

	Get the soak test running on ps4.

	Run soak test for 1 hr on ps4.

	--------------------------------

	Get the soak test running on x1.

	Run soak test for 1 hr on x1.

	--------------------------------

	From Velan:

	"Xbox One seems to have asymmetric alloc/free, it attempted to free something using the global context that wasn't allocated with the global context."

	Find this and fix it.

	--------------------------------

	Need extra safety. If a packet comes in that has a stale key or address, it will get forward to the game.

	It would be much better for every packet to have some safety, eg. looking exclusively at its own contents, we should be able to
	have a high confidence whether it is a network next packet, or a game packet.

	This generally should mean a prefixed signature or hash in front of the packet.

	Perhaps just 8 bytes is needed.

	We should extend packets to do this generally.

	The backend however is a special case, we don't need to change those packets.

	BUT

	We do need to change packets received from either the client, server or relays to have this property.

	Add a 32byte CRC or something in front of each packet. *** It really needs to be done ***

	--------------------------------


































	--------------------------------

	Would be good to track the client and server packets sent, so we can do packet loss as a % calculation, when games send different rates of packets.

	--------------------------------

	Re-add the client and server tests with ports, once I enable the ports on X1 in my own manifest...

	--------------------------------

	Find a way to get the X1 testing going within a UE4 plugin context.

	There is weird stuff with the ipv4 as ipv6 that needs to be tested.

	Also need to test the port binding running in the context of UE4.

	--------------------------------

	"Hey Glenn, the distro we'll be using is CentOS. Would it be possible for you to provide us with the plugin for both versions 7 and 8?"

	PUBG need Linux plugin versions for CentOS 7 and 8.

	--------------------------------

	Fix the link problem with the nintendo testbed.

	Get Nintendo switch devkit from Troy Innovation Garage.

	Set it up the test kit and verify that tests pass and the switch client connects to the linux server.

	Get assets from Nathan for Nintendo Switch.

	--------------------------------

	Build the iOS testbed and verify working on my iPad Pro or with emulator.

	--------------------------------



















	-----------------

	Psychz 1 month trial. Coordinate with PUBG launch. Make sure we have the eval tools to determine which relays are performant before starting the trial.

	-----------------

	Open source relay code so we can work with Stackpath.

	-----------------

	Update job listings on website.

	Make sure job listings actually go somewhere...
