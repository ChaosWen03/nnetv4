DONE

	Check all next_printf functions. Just found one that was missing args.

	Bring back the old reference backend before it was changed to use helper code.

	Clean it up and identify where we need to extend with blake2 prefix.

	Extend the reference backend to talk server init request/response protocol.

	Init request packet is read.

	Next, get the response going...

	ps. Verified relay talks to the reference backend just fine.

	Verify reference backend is able to talk to server and relays properly, and can carry sessions from an older version of SDK.

	Verify session update works with relays. It needs to be updated to support user flags and committed.

	Bring across code for blake2 hash into golang via libsodium.

	Reference backend code can now determine if a packet is network next or not.

	Extend backend code to sign packets sent back to the server.

	Verify the server gets the init response.

	Extend to the session update response.

	Verify that without a relay, client and server work and can sustain an upgraded direct route.

	Do not bother to maintain support for old and new relay packets. That can be done in the new relay. The reference relay is always bleeding edge.

TODO

	Upgrade the reference relay to use the blake2 prefixed packets.

	--------------------------------

	Verify that we can get traffic across several reference relays and the reference backend.

	--------------------------------









	--------------------------------

	We really should have a functional test that verifies payload client -> server direct, upgraded direct, and next.

	I mean FFS we could break game payload and not know...

	--------------------------------

	Fuzz test with client and server localhost with random direct packets w. random lengths.

	Meant to check stability of our protocols against random data.

	Worth running overnight. Add test.

	--------------------------------

	Add memory guard buffers to help catch memory trashes (suspected from Velan).

	--------------------------------

	Get the win64 testbed up and running debug and release.

	Get the win64 soak test running inside the win64 testbed.

	Run soak test for 1 hr on windows.

	--------------------------------

	Get the soak test running on ps4.

	Run soak test for 1 hr on ps4.

	--------------------------------

	Get the soak test running on x1.

	Run soak test for 1 hr on x1.

	--------------------------------

	From Velan:

	"Xbox One seems to have asymmetric alloc/free, it attempted to free something using the global context that wasn't allocated with the global context."

	Find this and fix it.

	--------------------------------

	Find a way to automatically determine what datacenter we are running in.

	eg. either public IP address range for bare metal, or server-side code that detects when you are in a cloud.

	Environment variable setting should always remain available as a fallback.

	--------------------------------

	Would be good to track the client and server packets sent, so we can do packet loss as a % calculation, when games send different rates of packets.

	--------------------------------

	Re-add the client and server tests with ports, once I enable the ports on X1 in my own manifest...

	--------------------------------

	Find a way to get the X1 testing going within a UE4 plugin context.

	There is weird stuff with the ipv4 as ipv6 that needs to be tested.

	Also need to test the port binding running in the context of UE4.

	--------------------------------

	"Hey Glenn, the distro we'll be using is CentOS. Would it be possible for you to provide us with the plugin for both versions 7 and 8?"

	PUBG need Linux plugin versions for CentOS 7 and 8.

	--------------------------------

	Build the iOS testbed and verify working on my iPad Pro or with emulator.

	--------------------------------
